from math import *
import numpy as np
import matplotlib . pyplot as plt
def funcion1(x):
    return np.exp(x) + 2**(-x)+ 2*cos(x)-6
def d1(x):
    return np.exp(x) - (np.log(2)/( 2**(x))) -2*sin(x)

# Ingreso datos de entrada para los diferentes métodos a trabajar
a = 1
b = 2
l2=[]
l1=[]
# guarda valores iniciales para Newton
pi=1.1
# guarda valores iniciales para secante
p0=1
p1=1.5
#guarda valores iniciales del error y del número de iteraciones
tol = 0.000001  #float(input("Ingrese el valor de la tolerancia: "))
nmax = 20 #float(input("Ingrese el número máximo de iteraciones: "))
error = 100
e=100
niter = 1
# Método de  Newton

#Evaluacion de la función en los puntos a, b y m

i=1
print("# iter  \t\t P  \t\t error")
print("{0} \t\t {1:6.4f}  \t {2:6.4f}".format(i, pi, error ))

# ciclo iterativo
while error > tol and i <= nmax:
    fa=funcion1(pi)  
    da=d1(pi)
    p = pi - (fa/da)
    error = abs(p - pi)

    pi=p
    l2.append(error)
    i += 1
    print("{0} \t\t {1:6.6f} \t {2:6.6f}".format(i, p,error ))

print("La raíz de la función dada en el intervalo [{0:6.4f},{1:6.4f}] es {2:6.7f}".format(a,b,p))

while e > tol and i <= nmax:
   
    fa=funcion1(p0)  
    fb=funcion1(p1)
    pe= p1 - (fb*(p1-p0))/(fb-fa)
    
    e= abs(p1 - p0)
    p0=p1
    p1=pe
    
    i += 1
    l1.append(e)

plt.plot(l1)
plt.plot(l2)
plt.xlabel("iteraciones")
plt.ylabel("error")
plt.show()
